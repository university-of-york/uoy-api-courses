service: uoy-courses-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: v1
  # This role is required to deploy an application to AWS with an ESG Account. See https://wiki.york.ac.uk/display/AWS/AWS%3A+Github+Actions for details
  cfnRole: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/GithubActionsDeploymentRole
  region: eu-west-1
  stackTags:
    name: courses api
    group: ESG
    project: course-search
    status: ${env:DEPLOY_ENVIRONMENT, 'dev'}
    pushed_by: github
    defined_in: serverless
    repo_name: uoy-api-courses
    team: ESG Teaching and Learning

package:
  exclude:
    - .github/**
    - .idea/**
    - docs/**
    - spec/**
    - package-lock.json
    - package.json
    - .prettierignore
    - .prettierrc.json
    - .xo-config.json
    - LICENSE
    - README.md

functions:
  courses:
    handler: src/handler.courses

custom:
  domainName: ${env:DOMAIN_NAME, ''}
  sslCertificateArn: ${env:SSL_CERTIFICATE_ARN, ''}

resources:
  Conditions:
    UseCustomDomainName: !Not
      - !Equals
        - ${self:custom.domainName}
        - ""

  Resources:
    # The following would be done magically by Serverless if we were defining
    # the API in the "normal" way, i.e., associating endpoints with functions
    # in the "functions" section above. However, because we're using an
    # OpenAPI specification to define our API, we lose the Serverless magic,
    # and have to define a number of things ourselves in CloudFormation

    # Create the API based on the OpenAPI specification
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Body: ${file(spec/openAPI.yml)}

    # Deploy the API
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${self:provider.stage}

    # Grant permission for the API to call the lambda - note that lambda name "courses"
    # earlier in this file becomes "CoursesLambdaFunction" in CloudFormation
    Permission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt CoursesLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com

    # Setup the application's domain name as a custom domain name for API Gateway, then map it to the application's API
    ApiGatewayCustomDomainName:
      Type: AWS::ApiGateway::DomainName
      Condition: UseCustomDomainName
      Properties:
        RegionalCertificateArn: ${self:custom.sslCertificateArn}
        DomainName: ${self:custom.domainName}
        EndpointConfiguration:
          Types:
            - REGIONAL

    BasePathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      Condition: UseCustomDomainName
      DependsOn: [ApiGatewayDeployment]
      Properties:
        BasePath: ""
        DomainName: !Ref ApiGatewayCustomDomainName
        RestApiId: !Ref ApiGatewayRestApi
        Stage: ${self:provider.stage}

    # DNS CNAME mapping the application's domain name to the behind-the-scenes domain name for the API
    # See https://wiki.york.ac.uk/display/AWS/AWS%3A+Application+DNS+Records
    AppCNAME:
      Type: Custom::CNAME
      Condition: UseCustomDomainName
      Properties:
        ServiceToken: arn:aws:sns:eu-west-1:230504789214:RequestRecordSet
        Source: ${self:custom.domainName}.
        Target: !Join ["", [!GetAtt ApiGatewayCustomDomainName.RegionalDomainName, "."]]

  Outputs:
    ApiGatewayRestApiId:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayDeploymentStageName:
      Value: ${self:provider.stage}
