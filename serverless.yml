
service: uoy-courses-api

plugins:
  - serverless-pseudo-parameters

custom:
  domainName: api.courses.dev.app.york.ac.uk

provider:
  name: aws
  runtime: nodejs12.x
  stage: v1
  # This role is required to deploy an application to AWS with an ESG Account. See https://wiki.york.ac.uk/display/AWS/AWS%3A+Github+Actions for details.
  cfnRole: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/GithubActionsDeploymentRole
  region: eu-west-1

functions:
  courses:
    handler: src/handler.courses

resources:
  Resources:
    # The following would be done magically by Serverless if we were defining
    # the API in the "normal" way, i.e., associating endpoints with functions
    # in the "functions" section above. However, because we're using an
    # OpenAPI specification to define our API, we lose the Serverless magic,
    # and have to define a number of things ourselves in Cloudformation

    # Create the API based on the OpenAPI specification
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Body: ${file(spec/openAPI.yml)}

    # Deploy the API
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${self:provider.stage}

    # Grant permission for the API to call the lambda - note that lambda name "courses"
    # earlier in this file becomes "CoursesLambdaFunction" in Cloudformation
    Permission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - CoursesLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com

    # SSL certificate for the application's domain name (see https://wiki.york.ac.uk/display/ittechdocs/HTTPS+for+apps)
    # Note that Serverless will try to evaluate anything that looks like a variable - ${...} including Cloudformation
    # variables - so use "serverless-pseudo-parameters" which will understand "#{AWS::Region}" as a Cloudformation variable
    SSLCertificate:
      Type: Custom::Certificate
      Properties:
        DomainName: ${self:custom.domainName}
        ValidationMethod: DNS
        ServiceToken: !Sub 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:binxio-cfn-certificate-provider'
    SSLCertificateDNSRecord:
      Type: Custom::CertificateDNSRecord
      Properties:
        CertificateArn: !Ref SSLCertificate
        DomainName: ${self:custom.domainName}
        ServiceToken: !Sub 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:binxio-cfn-certificate-provider'
    SSLCertificateValidationDomainRecord:
      Type: Custom::CNAME
      Properties:
        ServiceToken: 'arn:aws:sns:eu-west-1:230504789214:RequestRecordSet'
        Source: !GetAtt SSLCertificateDNSRecord.Name
        Target: !GetAtt SSLCertificateDNSRecord.Value
    IssuedSSLCertificate:
      Type: Custom::IssuedCertificate
      Properties:
        CertificateArn: !Ref SSLCertificate
        ServiceToken: !Sub 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:binxio-cfn-certificate-provider'
    # Setup the application's domain name as a custom domain name for API Gateway, then map it to the application's API
    ApiGatewayCustomDomainName:
      Type: AWS::ApiGateway::DomainName
      Properties:
        RegionalCertificateArn: !Ref IssuedSSLCertificate
        DomainName: ${self:custom.domainName}
        EndpointConfiguration:
          Types:
            - REGIONAL
    BasePathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn: [ApiGatewayDeployment]
      Properties:
        BasePath: ''
        DomainName: !Ref ApiGatewayCustomDomainName
        RestApiId: !Ref ApiGatewayRestApi
        Stage: ${self:provider.stage}
    # DNS CNAME mapping the application's domain name to the behind-the-scenes domain name for the API
    AppCNAME:
      Type: Custom::CNAME
      Properties:
        ServiceToken: "arn:aws:sns:eu-west-1:230504789214:RequestRecordSet"
        Source: ${self:custom.domainName}.
        Target: !Join [ '', [ !GetAtt ApiGatewayCustomDomainName.RegionalDomainName, '.' ] ]

  Outputs:
    ApiUrl:
      Description: "API URL"
      Value: !Join ['', [ "https://", Ref: ApiGatewayRestApi, ".execute-api.", Ref: AWS::Region, ".amazonaws.com/${self:provider.stage}/" ]]
