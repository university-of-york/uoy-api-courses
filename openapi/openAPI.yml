openapi: 3.0.1
info:
  title: Courses API
  description: 'This defines the University of York Courses API. This is used by the course search app on the University website.'
  contact:
    email: esg-teaching-and-learning-group@york.ac.uk
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
tags:
  - name: courses
    description: Querying for courses
paths:
  /courses:
    get:
      tags:
        - courses
      summary: Search for a course
      operationId: search
      parameters:
        - name: search
          in: query
          description: Search term to be matched against course properties. Results are ordered by relevance.
          required: true
          explode: true
          schema:
            type: string
            example: History
        - name: max
          in: query
          description: Maximum number of results to be returned
          required: false
          explode: true
          schema:
            type: integer
            example: 20
        - name: offset
          in: query
          description: Starting rank of results that should be included. The most relevant result has a rank of 1.
          required: false
          explode: true
          schema:
            type: integer
            example: 100
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt: ["CoursesLambdaFunction", "Arn"]
              - '/invocations'
        passthroughBehavior: "when_no_match"
        httpMethod: "POST" #This HAS to be POST for lambda integrations
        type: "aws_proxy"
components:
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - properties:
                  status:
                    example: 500
                  error:
                    example: Internal Server Error
                  message:
                    example: An error has occurred.
  schemas:
    Course:
      type: object
      properties:
        title:
          type: string
          example: History (BA) - Undergraduate
        liveUrl:
          type: string
          example: https://www.york.ac.uk/study/undergraduate/courses/ba-history/
        award:
          type: string
          example: BA (Hons)
        department:
          type: array
          items:
            type: string
            example: ["Department of Economics and Related Studies", "Department of History"]
        level:
          type: string
          example: undergraduate
          enum:
            - undergraduate
            - postgraduate
        length:
          type: string
          example: 3 years full-time
        typicalOffer:
          type: string
          example: AAA
        yearOfEntry:
          type: string
          example: 2021/22
        distanceLearning:
          type: boolean
          example: true
        summary:
          type: string
          example: Learn how studying the past can help us predict market futures
        imageUrl:
          type: string
          example: https://www.york.ac.uk/media/study/courses/undergraduate/history/hero-history-economics-ba-1160.jpg
        ucasCode:
          type: string
          example: VL11
    Error:
      type: object
      properties:
        timestamp:
          type: string
          example: "2020-09-11T14:39:22.685Z"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: The search parameter is required.
        path:
          type: string
          example: /courses
